Intructions for regular development data structures:
https://hiltmon.com/blog/2013/07/03/a-simple-c-plus-plus-project-structure/

For each application, the folders are:

bin: The output executables go here, both for the app and for any tests and spikes.
build: This folder contains all object files, and is removed on a clean.
doc: Any notes, like my assembly notes and configuration files, are here. I decided to create the development and production config files in here instead of in a separate config folder as they “document” the configuration.
include: All project header files. All necessary third-party header files that do not exist under /usr/local/include are also placed here.
lib: Any libs that get compiled by the project, third party or any needed in development. Prior to deployment, third party libraries get moved to /usr/local/lib where they belong, leaving the project clean enough to compile on our Linux deployment servers. I really use this to test different library versions than the standard.
spike: I often write smaller classes or files to test technologies or ideas, and keep them around for future reference. They go here, where they do not dilute the real application’s files, but can still be found later.
src: The application and only the application’s source files.
test: All test code files. You do write tests, no?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

How To use the program:
In /docs there is a .txt file called markov.txt this is where the user input will go.
The syntax of the program is as follows:
-Use "settings:" to change the settings of the synthesizer, then underneith you can change the following settings:
    -"waveform:" Waveform uses the arguments: "sine", "saw", "square", "triangle". Use this to set the base waveform.
    -"type:" Type sets the type of synthesizer, arguments are: "simple", "fm".
    -"mod:" Sets the amount of modulation. Arguments is whole number.
    -"ratio:" Sets the ratio of the modulator oscillator in the case of fm. Takes a floating point number as an argument.
    -"measure:" Sets the length of the melody that will be generated.
    -"bpm:" Sets the bpm of the song. Takes a whole number as argument.

-Then to switch to the next type of settings for the program use "==".
-Use "melody:" to edit the markovchain that the program will use:
    -The markovchain is made up of a 2D array, each new line represents a new piece to the chain. Each new line is defined by the "//" at the end of the line.
    -The first note you use as an input will be seen as the start, then the following notes will be read as the notes that can follow up on that note.
    -When done with a line add "`[number]" to add a notelength to the note.
    -Each note must contain the following: A note displayed as a character on the notes schale (sharps and flats not yet implemented), for example: MIDI 60 is a c so you type a c to display that note.
     Then for the ocatve you type the number of the octave that the note should be played as, we use base 0 as the lowest octave possible.
     For example: c4 is MIDI-note number 60.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

80% of the code is written by myself, I took some inpiration (and copied) from my teacher Ciska Vriezenga:
https://github.com/ciskavriezenga/cppExampleshttps://github.com/ciskavriezenga/cppExamples

In the comments the copied code will be marked as such: ~~CC~~

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~